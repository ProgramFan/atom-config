diff --git a/language-asciidoc/grammars/language-asciidoc.cson b/language-asciidoc/grammars/language-asciidoc.cson
index a668424..d67c92f 100644
--- a/language-asciidoc/grammars/language-asciidoc.cson
+++ b/language-asciidoc/grammars/language-asciidoc.cson
@@ -202,6 +202,9 @@ repository:
       {
         include: "#bibliography-anchor"
       }
+      {
+        include: "#general-inline-macro"
+      }
     ]
   "attribute-entry":
     patterns: [
@@ -752,6 +755,25 @@ repository:
             name: "punctuation.separator.asciidoc"
       }
     ]
+  "general-inline-macro":
+    patterns: [
+      {
+        name: "markup.other.inline.asciidoc"
+        match: "(?<!\\\\)(\\p{Word}+):([^\\s\\[:]*)(?:\\[((?:\\\\\\]|[^\\]])*?)\\])"
+        captures:
+          "1":
+            name: "entity.name.function.asciidoc"
+          "2":
+            name: "markup.link.asciidoc"
+            patterns: [
+              {
+                include: "#attribute-reference"
+              }
+            ]
+          "3":
+            name: "string.unquoted.asciidoc"
+      }
+    ]
   "image-macro":
     patterns: [
       {
diff --git a/language-asciidoc/grammars/repositories/asciidoc-grammar.cson b/language-asciidoc/grammars/repositories/asciidoc-grammar.cson
index e52386a..cc7819b 100644
--- a/language-asciidoc/grammars/repositories/asciidoc-grammar.cson
+++ b/language-asciidoc/grammars/repositories/asciidoc-grammar.cson
@@ -134,4 +134,6 @@ repository:
       include: '#characters'
     ,
       include: '#bibliography-anchor'
+    ,
+      include: '#general-inline-macro'
     ]
diff --git a/language-asciidoc/grammars/repositories/inlines/general-inline-macro-grammar.cson b/language-asciidoc/grammars/repositories/inlines/general-inline-macro-grammar.cson
new file mode 100644
index 0000000..0de7d96
--- /dev/null
+++ b/language-asciidoc/grammars/repositories/inlines/general-inline-macro-grammar.cson
@@ -0,0 +1,22 @@
+key: 'general-inline-macro'
+
+patterns: [
+
+  # Matches a general inline macro shall more specific match fail.
+  #
+  # Examples
+  #
+  #   cite:[Kale2015]
+  #   cite:Name[Kale2015]
+  #
+  name: 'markup.other.inline.asciidoc'
+  match: '(?<!\\\\)(\\p{Word}+):([^\\s\\[:]*)(?:\\[((?:\\\\\\]|[^\\]])*?)\\])'
+  captures:
+    1: name: 'entity.name.function.asciidoc'
+    2:
+      name: 'markup.link.asciidoc'
+      patterns: [
+        include: '#attribute-reference'
+      ]
+    3: name: 'string.unquoted.asciidoc'
+]
diff --git a/spec/inlines/general-inline-macro-grammar-spec.coffee b/spec/inlines/general-inline-macro-grammar-spec.coffee
new file mode 100644
index 0000000..1c8432b
--- /dev/null
+++ b/spec/inlines/general-inline-macro-grammar-spec.coffee
@@ -0,0 +1,37 @@
+describe 'Should tokenizes text link when', ->
+  grammar = null
+
+  beforeEach ->
+    waitsForPromise ->
+      atom.packages.activatePackage 'language-asciidoc'
+
+    runs ->
+      grammar = atom.grammars.grammarForScopeName 'source.asciidoc'
+
+  it 'parses the grammar', ->
+    expect(grammar).toBeDefined()
+    expect(grammar.scopeName).toBe 'source.asciidoc'
+
+  describe 'general inline macro', ->
+
+    it 'parses `link`-like macro', ->
+      {tokens} = grammar.tokenizeLine 'See cite:[Knuth1999] for more details'
+      expect(tokens).toHaveLength 6
+      expect(tokens[0]).toEqualJson value: 'See ', scopes: ['source.asciidoc']
+      expect(tokens[1]).toEqualJson value: 'cite', scopes: ['source.asciidoc', 'markup.other.inline.asciidoc', 'entity.name.function.asciidoc']
+      expect(tokens[2]).toEqualJson value: ':[', scopes: ['source.asciidoc', 'markup.other.inline.asciidoc']
+      expect(tokens[3]).toEqualJson value: 'Knuth1999', scopes: ['source.asciidoc', 'markup.other.inline.asciidoc', 'string.unquoted.asciidoc']
+      expect(tokens[4]).toEqualJson value: ']', scopes: ['source.asciidoc', 'markup.other.inline.asciidoc']
+      expect(tokens[5]).toEqualJson value: ' for more details', scopes: ['source.asciidoc']
+
+    it 'parses `image`-like macro', ->
+      {tokens} = grammar.tokenizeLine 'This is user:defined[macro] for demo'
+      expect(tokens).toHaveLength 8
+      expect(tokens[0]).toEqualJson value: 'This is ', scopes: ['source.asciidoc']
+      expect(tokens[1]).toEqualJson value: 'user', scopes: ['source.asciidoc', 'markup.other.inline.asciidoc', 'entity.name.function.asciidoc']
+      expect(tokens[2]).toEqualJson value: ':', scopes: ['source.asciidoc', 'markup.other.inline.asciidoc']
+      expect(tokens[3]).toEqualJson value: 'defined', scopes: ['source.asciidoc', 'markup.other.inline.asciidoc', 'markup.link.asciidoc']
+      expect(tokens[4]).toEqualJson value: '[', scopes: ['source.asciidoc', 'markup.other.inline.asciidoc']
+      expect(tokens[5]).toEqualJson value: 'macro', scopes: ['source.asciidoc', 'markup.other.inline.asciidoc', 'string.unquoted.asciidoc']
+      expect(tokens[6]).toEqualJson value: ']', scopes: ['source.asciidoc', 'markup.other.inline.asciidoc']
+      expect(tokens[7]).toEqualJson value: ' for demo', scopes: ['source.asciidoc']
