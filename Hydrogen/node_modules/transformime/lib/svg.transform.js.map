{"version":3,"sources":["../src/svg.transform.js"],"names":[],"mappings":"AAAA;;AAEA;;;;;;;;;;;;;;;;;QAagB,Y,GAAA,Y;AAAT,SAAS,YAAT,CAAsB,QAAtB,EAAgC,KAAhC,EAAuC,GAAvC,EAA4C;AAC/C,QAAM,YAAY,IAAI,aAAJ,CAAkB,KAAlB,CAAlB;AACA,cAAU,SAAV,GAAsB,KAAtB;;AAEA,QAAM,aAAa,UAAU,oBAAV,CAA+B,KAA/B,EAAsC,CAAtC,CAAnB;AACA,QAAI,CAAC,UAAL,EAAiB;AACb,cAAM,IAAI,KAAJ,CAAU,qDAAV,CAAN;AACH;;AAED,WAAO,UAAP;AACH;AACD,aAAa,QAAb,GAAwB,eAAxB","file":"svg.transform.js","sourcesContent":["\"use strict\"\n\n/**\n * Converts a Scalable Vector Graphics file to an svgElement for HTML.\n *\n * @param {string} mimetype - The mimetype of the data to be transformed,\n * it is unused by this function but included for a common API.\n * @param {string} data - The svg data to be transformed.\n * @param {Document} document - A Document Object Model to be used for\n * creating an html div element.\n * @return {HTMLElement} - An html div element containing the\n * transformed svg.\n * @throws {Error} - Throws an error if inner html does not have SVG as its\n * first tag name.\n */\nexport function SVGTransform(mimetype, value, doc) {\n    const container = doc.createElement('div')\n    container.innerHTML = value\n\n    const svgElement = container.getElementsByTagName('svg')[0]\n    if (!svgElement) {\n        throw new Error(\"SVGTransform: Error: Failed to create <svg> element\")\n    }\n\n    return svgElement\n}\nSVGTransform.mimetype = 'image/svg+xml'\n"]}