key: 'inlines'

patterns: [

  # Matches bold unconstrained phrases
  #
  # Examples
  #
  #   b**old** phrase
  #
  begin: '\\\\?(\\[(?:[^\\]]+?)\\])?(\\*\\*(?=.))'
  beginCaptures:
    1: name: 'support.constant.asciidoc' #TODO: handle this parsing seperately
  end: '(?<=.|^)\\*\\*'
  name: 'markup.bold.asciidoc'
  patterns: [
    match: '.+?(?=\\*\\*)'
  ]
,
  # Matches bold constrained phrases
  #
  # Examples
  #
  #   *bold phrase*
  #
  begin: '(?<=^|[^\\w;:}])(\\[(?:[^\\]]+?)\\])?((?<!\\*)\\*(?=[^\\s\\*]))'
  beginCaptures:
    1: 'name': 'support.constant.asciidoc' #TODO: handle this parsing seperately
  end: '(?<![\\s\\*])\\*(?!\\w)'
  name: 'markup.bold.asciidoc'
  patterns: [
    match: '.+?(?=\\*\\W)'
  ]
,
  # Matches italic constrained phrases
  #
  # Examples
  #
  #   _italic phrase_
  #
  match: '(?!_{4,}\\s*$)(?<=^|[^\\w;:])(?:\\[(?:[^\\]]+?)\\])?(_\\S_|_\\S[\\s\\S]*?\\S_)(?!\\w)'
  captures:
    0: name: 'markup.italic.asciidoc'
,
  # Matches italic unconstrained phrases
  #
  # Examples
  #
  #   i__talic__ phrase
  #
  match: '\\\\?(?:\\[([^\\]]+?)\\])?(__(?!_)[\\s\\S]+?__)' # now including the underscores in the match
  captures:
    0: name: 'markup.italic.asciidoc'
,
  # Matches substitutions
  #
  # Examples
  #
  #   Check out {docslink} too!
  #
  #   {checkedbox} That's done!
  #
  name: 'markup.substitution.asciidoc'
  match: '(?<=^|\\s)({)([^\/\\:\\s]+)(})'
,
  # Matches block ID elements
  #
  # Example: [[section-title]]
  #
  match: '(?<=^|\\s)(\\[{2})([^\\[\\]]+)(\\]{2})'
  captures:
    1: name: 'support.constant.asciidoc'
    2: name: 'markup.blockid.asciidoc'
    3: name: 'support.constant.asciidoc'
,
  # Matches bibliography entities
  #
  # Example: [[[bib-ref]]]
  #
  match: '(?<=^|\\s)(\\[{3})([^\\[\\]]+)(\\]{3})'
  captures:
    1: name: 'support.constant.asciidoc'
    2: name: 'markup.biblioref.asciidoc'
    3: name: 'support.constant.asciidoc'
,
  # Matches reference elements
  #
  # Example: <<section-ref>>
  #
  match: '(?<=^|\\s)(\\<\\<)([^\\<\\>]+)(\\>\\>)'
  captures:
    1: name: 'support.constant.asciidoc'
    2: name: 'markup.reference.asciidoc'
    3: name: 'support.constant.asciidoc'
,
  # Matches monospace inlines
  #
  # Examples
  #
  #   `Text in {backticks}` renders exactly as entered, in `monospace`.
  #
  match: '(^|[^\\p{Word};:"\'`\\}])((?:\\[([^\\\\]]+?)\\])?`(\\S|\\S.*?\\S)`(?![\\p{Word}"\'`]))'
  captures:
    2: name: 'markup.raw.inline.asciidoc'
,
  # Matches characters
  #
  # Examples
  #
  #   Dungeons &amp; Dragons
  #
  name: 'markup.htmlentity.asciidoc'
  match: '(\&)(.+?)(;)'
  captures:
    1: name: 'support.constant.asciidoc'
    3: name: 'support.constant.asciidoc'
,
  # Matches inline macros
  #
  # Examples
  #
  #   http://www.docbook.org/[DocBook.org]
  #   kbd:[Ctrl,T]
  #
  name: 'markup.macro.inline.asciidoc'
  match: '(?<=^|\\s)(\\w+:)([^:]*?)(\\[)([^\\]]*?)(\\])'
  captures:
    1: name: 'support.constant.asciidoc'
    3: name: 'support.constant.asciidoc'
    5: name: 'support.constant.asciidoc'
,
  # Matches common URLs
  #
  # NOTE: As mentioned in http://stackoverflow.com/questions/1141848/regex-to-match-url,
  # this regex is not foolproof.
  #
  # Examples
  #
  #   http://www.docbook.org
  #
  name: 'markup.underline.link.asciidoc'
  match: '(?<=^|\\s)(\\S+://\\S+\\.(com|net|org|edu|gov)(\/\\S+)?)'
,
  # Matches block macros
  #
  # Examples
  #
  #   image::tiger.png[Tyger tyger]
  #
  name: 'markup.macro.block.asciidoc'
  match: '(?<=^|\\s)(\\w+\:{2})([^\:]*?)(\\[)([^\\]]*?)(\\])'
  captures:
    1: name: 'support.constant.asciidoc'
    3: name: 'support.constant.asciidoc'
    5: name: 'support.constant.asciidoc'
]
